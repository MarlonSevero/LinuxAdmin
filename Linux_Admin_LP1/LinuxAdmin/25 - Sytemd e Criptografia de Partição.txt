****** Systemd ******

        E uma gerenciador de servicos,sockets, devive units, swap montagem, timer, target, utilizacao de servers. 
        E muito mais. Um canivete suico no linux.  

    ps. Veio pra substituir init, SysV, upstart. 

        man systemd 

    Systemd e o gerencidor porem utilizamos o systemctl para gerenciar.

        man systemctl 
        Para vermos as units podemos rodar um systemctl list-unit 


    exemplo 1.
        systemctl list-units --type automount 

    exemplo 2.
        systemctl list-units --type service 

    
    exemplo 3.
        systemctl list-unit-files --type service               //traz a info referente a \

        enable - habilitado
        mask - mascarado  (servico nao utilizado no momento, podendo depender de outro. Se estiver nesse estado nao pode ser utilizado. A nao ser que tire a mascara)
        static - estatico (defaults)
        alias - apelidos 
        disable - desabilitado 
        static e enable - vao ser inicializados ao ligar a maquina. 


    exemplo 4.
        systemctl list-unit-files --type service  --state enabled 


    //Como desabilitar um servico da inicializacao.

        ex1. systemctl disable cups 
        ex2. systemctl disable cups cups-browsed.service 


    //Como habilitar um servico da inicializacao.

        ex1. systemctl enable cups 


    //Checagem se o servico esta na inicializacao.

        ex. systemctl is-enable cups 
        ex2. systemctl is-active cups


    //Bloqueando um servico para nao ser utlizado - Mascarando

        systemctl stop  cups
        systemctl disable cups 
        systemctl mask cups


    // Tirando a mascara

        systemctl un mask cups


    reload -- Recarrega as config sem parar o servico. 

        ex. systemctl reload appamor.service


    Status - Traz uma previa de log filtrado 


*** Targets ***

    man runlevel - foi substituido por esse cara.

    0  =  poweroff.target 
    1  =  rescue.target
    5  =  graphical.target 
    ...

    systemctl get-default    //traz o runlevel default >> graphical.target 
    systemctl set-default multi.user.target   //deixando somente em modo texto.
    systemctl set-default graphical.target

    Podemos mudar o runlevel em tempo de execucao.

    ex. systemctl reboot ou telinit 6
        telinit chama o runlevel 6.

    ex2 . telinit 3 - tira o ambiente grafico em tempo de execucao.

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ---- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

****** Encryption ******

Gerenciador de Encriptacao. 

apt install cryptsetup -y 

Primeiro realizamos a encryption, quando queremos que a particao seja encriptada. 

    cryptsetup --help 

    -c, --cipher=STRING >> cifra usada para criptografar o disco (veja /proc/crypto)

    -y, --verify-passphrase >> Verefica a senha perguntando duas vezes.

    -s, --key-size=BITS >> quantidade de bits utilizada

    *Comando para criptografar com key tamanho 256.
        cryptsetup -y --cipher aes-essiv:sha256 --key-size 256 luksFormat /dev/sdc1 

    Podemos ver isso dando um >> blkid /dev/sdc1

    ps. Nao podemos realizar a formatacao do sdc1 se vamos perder a encryptacao.

Assim para criarmos o disco para utilizar, sobre a camada da encryption precisamos criar um volume. (Device Mapper) MD

    //Para abrir o dispositivo encriptado, associamos o dispositivo a um volume com o comando abaixo.
        cryptsetup luksOpen /dev/sdc1 crypt                      

    //Podemos fechar novamente com o Comando abaixo.
         cryptsetup luksClose crypt 

    E utilizar em momentos especificos dando um luksOpen.

Apos criar o vinculo realizamos a formatacao.
        mkfs -t xfs /dev/mapper/crypt 
        xfs_admin -L crypt /dev/mapper/crypt
E a montagem do disco. 
        mkdir /data 
        mount /dev/mapper/crypt     /data/
       
 Podemos utilizar e depois desmontar com umount para seguranca e depois um luksClose
    ps. os arquivos nao se perdem, so retiramos o vinculo. Depois de utilizar, podemos realizar o luksClose. 
    Se quiser usar novamente, damos um luksOpen /dev/sdc1 crypt e depois montar com mount /dev/mapper/crypt /data


* Automatizando *

 vim /etc/cryptab  //faz a tratativa de arquivos encriptados

 ** Arquivo proprio para encriptacao. Consegue tratar arquivos encriptados. Para deixar essa montagem automatica, fazemos dessa maneira:

<target name> <source device> <key file> <options>

crypt           /dev/sdc1         none      luks

Quando iniciarmos, o sistema operacional ja vai solicitar a senha. 

cryptdisks_start crypt >> ele vai ler o arquivo, e vai tentar fazer o luksOpen. Solicita a senha.
cryptdisk_stop crypt >> realiza a parada da usabilidade do disco.

****

Podemos gerar um arquivo com a chave de senha, fazendo o sistema operacional iniciar sem solicitar a senha.
Porem precisamos ter cuidado com quem vai ter acesso a essa chave. 
Logo depois de criado vamos colocar no campo <key file> no fstab. 

1) dd if=/dev/urandom of=/var/filecrypto bs=4096 count=1 (criando arquivo com dd, usando urandom)

2) chmod 0600 /var/filecrypto (alterando a config de permissao)

3) cryptsetup luksAddKey /dev/sdc1 /var/filecrypto


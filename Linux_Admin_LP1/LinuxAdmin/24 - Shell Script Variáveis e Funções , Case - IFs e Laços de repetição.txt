Shell Script : Linguagem interpretativa.

A ordem importa, leitura realizada de cima para baixo. (top down).

----------------------------------------------------------------------------------------
*Criacao de variaveis de ambiente*

touch file.sh
chmod a+x file.sh
vim file.sh

1 linha - Qual sera o shell que ira interpretar o seu script. Chamada do interpretador.
#!/bin/bash (shebang)

* Declaracao de variaveis estaticas: (SEM ESPACO S) *
    
    ex. VAR1=10
   
    ex2. VAR2=texto
   
    ex3. VAR3="O texto tem espaco"
   
    ex4. VAR4=/tmp 
   
    ex5. SCRIPTNAME=/etc/init.d/"$NAME"

* Chama de Variavel : Chamamos com '$' *

    $NOME_VARIAVEL
   
    ex1. VAR5="O conteudo da var 4 e $var4" 
   
    ex2. VAR6=$VARIAVEL_SISTEMA
   
    ex3. VAR7=$(comando) **ta recebendo como conteudo o programa do comando ex. pwd.
    Vai armazenar o resultado na variavel.(subshell)
    ou tambem podemos fazer com crase : VAR8=`pwd`

    ps. env >> mostra as variaveis globai no sistema. 

* ENTRADA DE DADOS 

ex1. read NOME_VARIAVEL
ex2. read -p "READ COMANDO PARA CAPTURA, -p JA ARMAZENA" NOME_VARIAVEL
ex3. read -s -p "-s UTILIZADO PARA SENHAS" SENHA_VAR
ex4. echo -e "\n$NOME_VARIAVEL"
ex5. echo -e "\n$SENHA"

ps. bash -x script.sh (debug)

#Variaveis especiais

echo "nome do arquivo $0"
echo "primeiro parametro $1"
echo "segundo parametro $2"
echo "numero de parametros $#"
echo "return code do ultimo comando com sucesso $?"
ppp
echo "return code do ultimo comando com sucesso $?"

*return code : 
    0 = sucesso
    !0 = fail 

------------------------------------------------------------------------------------------------------------

*Funcoes*

help function : traz uma ajuda para a declaracao de funcao.

function NOME {COMANDOS ; } ou NOME () { COMANDOS ;} 

function menu {
    echo "Digite 1 para somar" 
    echo "Digite 2 para substrair" 
    echo "Digite 3 para sair" 
    read OPCAO
}
 

 valores(){
    echo "Digite o primeiro valor" 
    read VLR1
    echo "Digite o segundo valor" 
    read VLR2
 }

  somar(){
    valores //CHAMA A FUNCAO VALORES
    echo "A soma dos valores e $(($VLR1+VLR2))"
 }

   substracao(){
    valores //CHAMA A FUNCAO VALORES 
    echo "A substracao dos valores e $(($VLR1-VLR2))"
 }


****Chamando funcoes ****

ex. Em um arquivo .bash podemos chamar o local onde a funcao esta salva.

#!/bin/bash

*1 modo : source

source /usr/local/bin/scripts/funcoes.sh

*2 modo : ponto espaco 

. /usr/local/bin/scripts/funcoes.sh

------------------------------------------------------------------------------------------------------------

Case - Utilizado para criamos condicoes.

help case 

case VARIAVEL in 
    PADRAO1)
    COMANDOS 
;;
esac 


. /usr/local/bin/scripts/funcao.sh

menu 

EX. case $OPCAO in
        1 | 01)                            //condicao (| = ou )
            somar                         //opcao
            ;;                           //break
        2)  
            substrair
            ;;
        0) 
            exit
            ;;
        *)                                   //qualquer outra opcao
            echo 'Digite uma opcao valida.'
            ;;
    esac                                    //finalizando case com a palavra ao contrario.






ps. Realizando teste

test ou []

help test 

* File operator
* String Operators 
* Other Operators


exemplo.

[ -d /tmp ]                   //teste se o arquivo e um diretorio. Podemos definir condicionais em qualquer elemento.
[ -x /bim/ls ]                  //testa se o arquivo e executavel.
test -f $variavel               //testa se e um arquivo existente/comum
[ -r  /etc/defaults/cron ]      //permissao de leitura
if [-z "$varivel" -a -e /etc/arquivo]
$OPCAO -eq 1 
$OPCAO -ne 2 
$OPCAO -gt 3 

----------------------------------------------------------------------------------------------------

*CONDICOES* 

exemplo :

. /usr/local/bin/scripts/funcoes.sh 
menu 

if [ $OPCAO -eq 1 ]; then 
    somar 
elif [ $OPCAO -eq 2 ]; then 
    subtrair 
elif [ $OPCAO -eq 0 ]; then
    exit 
else 
    echo "Digite uma opcao valida!"
fi 


ps. texto utilizamos =

----------------------------------------------------------------------------------------------------

*LACOS DE REPETICAO* 

Enquanto verdadeiro continua dentro do laco.

exemplo : 

while [ $OPCAO -ne 0]; do 
. /usr/local/bin/scripts/funcoes.sh 
menu 

if [ $OPCAO -eq 1 ]; then 
    somar 
elif [ $OPCAO -eq 2 ]; then 
    subtrair 
elif [ $OPCAO -eq 0 ]; then
    exit 
else 
    echo "Digite uma opcao valida!"
fi 

sleep 10                  //agurda 10s
clear                   //limpa tela
    menu                    //chama menu novamente 

done                    //finaliza 1 execucao do laco. 

*FOR*

exemplo 1.

for lista 
    in 
        joao maria gabriel tereza; 
    do 
        echo "Teste $lista"; 
done

exemplo 2.

for lista 
    in 
        joao maria gabriel tereza; 
    do 
        useradd -m -d /tmp/$tmp/$lista $lista;
    done
done

exemplo 3.

for lista in joao pedro gabriel tereza; do userdel -r $lista ; done 


----------------------------------------------------------------------------------------------------

LINKS / ATALHOS

ps. linksimbolicos 
    -hardlink 
    -softlink 
como criar ? 

*link simbolico / softlink
    ln -s /usr/local/bin/scripts/  /scripts 

*link diretorio / hardlink
    ln arq01.txt arq2.txt                              ps.se alterar um, altera outro. 
    

